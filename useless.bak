package main

import (
	"bytes"
	"gocv.io/x/gocv"
	"image"
	"image/jpeg"
	"io/ioutil"
	"log"
	"os"
	"time"
)

// 获取子图片相关的所有坐标点
func testGetAllSubPicPos() {
	ptrPic := newPic()
	ptrPic.init(g_ptrConfig.Base)
	ptrSubPic := newSubPic()
	ptrSubPic.init(g_ptrConfig.PathPart, "2.jpg")

	sliPos := testGetSliPosInPic(ptrPic, ptrSubPic)
	logPrintf("匹配点数量:%v", len(sliPos))
	for _, ptrPos := range sliPos {
		logPrintf("匹配点坐标:(%v,%v)", ptrPos.m_x, ptrPos.m_y)
	}
}

// 测试获取与子图片最相似的第一个点的坐标
func testGetFirstExactPos() {
	ptrPicMgr := newPicMgr()
	defer ptrPicMgr.close()
	ptrPicMgr.load(g_ptrConfig.PathPart, getDirFile(g_ptrConfig.PathPart, g_ptrConfig.PartExt))

	ptrPic := newPic()
	ptrPic.init(g_ptrConfig.Base)
	testGetFirstPos(ptrPic, ptrPicMgr.m_mapPic[1])
}

// 测试指定点的相似度
func testPosSimilar() {
	ptrPicMgr := newPicMgr()
	defer ptrPicMgr.close()
	ptrPicMgr.load(g_ptrConfig.PathPart, getDirFile(g_ptrConfig.PathPart, g_ptrConfig.PartExt))

	ptrPic := newPic()
	ptrPic.init(g_ptrConfig.Base)
	ptrPos := newPos()
	ptrPos.init(38, 25)
	testPosInPic(ptrPic, ptrPicMgr.m_mapPic[1], ptrPos)
}

// 测试图片是否包含在大图中
func testContainTest() {
	baseF, e := os.Open(g_ptrConfig.Base)
	failOnError(e, "open base fail")
	defer baseF.Close()

	partF, e := os.Open(g_ptrConfig.PathPart + "/01.jpg") // 子图片路径
	failOnError(e, "open part fail")
	defer partF.Close()

	baseI, _, e := image.Decode(baseF)
	failOnError(e, "image decode fail base")
	//logPrintf(baseExt)

	partI, _, e := image.Decode(partF)
	failOnError(e, "image decode fail part")
	//logPrintf(partExt)

	logPrintf("是否包含:%v", testContain(baseI, partI))
}

// 测试=================================

// 获取所有值出现的数量
func (this *PicMgr) testCalcCounter(ptrPic *Pic) {
	assert(ptrPic != nil, "ptrPic == nil")

	ptrBeginPos := this.testGetMatchBeginPos(ptrPic)
	if ptrBeginPos == nil {
		logPrintf("没有任何图片匹配")
		return
	}

	mapCounter := make(map[int]int)
	for _, ptrSubPic := range this.m_mapPic {
		counter := testGetSubPicNumSlideX(ptrPic, ptrSubPic, ptrBeginPos)
		mapCounter[ptrSubPic.m_value] = counter
	}

	logPrintf("匹配类型数量:%v", len(mapCounter))
	for value, counter := range mapCounter {
		logPrintf("值:%v,数量:%v", value, counter)
	}
}

// 测试指定坐标是否相似
func testPosInPic(ptrPic *Pic, ptrSubPic *SubPic, ptrPos *Pos) []*Pos {
	// 参数校验
	assert(ptrPic != nil, "ptrPic == nil")
	assert(ptrSubPic != nil, "ptrSubPic == nil")
	assert(ptrPos != nil, "ptrPos == nil")

	// 参数整理
	picSubWidth := g_ptrConfig.BaseW
	picSubHeight := g_ptrConfig.BaseH
	if (picSubWidth == 0) || (picSubHeight == 0) {
		picSubWidth = ptrSubPic.width()
		picSubHeight = ptrSubPic.height()
	}

	sliPos := make([]*Pos, 0)
	hash := getHash()

	pic := ptrPic.m_pic.(*image.YCbCr)
	r := image.Rect(ptrPos.m_x, ptrPos.m_y, ptrPos.m_x+picSubWidth, ptrPos.m_y+picSubHeight)
	subBaseI := pic.SubImage(r)
	subBaseM := gocv.NewMat()
	defer subBaseM.Close()
	hashCompute(hash, subBaseI, &subBaseM)
	isSame, similar := isSameMat(hash, &subBaseM, &ptrSubPic.m_mat)
	logPrintf("起始点:(%v,%v),相似度:%v,是否相同:%v", ptrPos.m_x, ptrPos.m_y, similar, isSame)

	testSaveImg(subBaseI)

	return sliPos
}

func testSaveImg(i image.Image) {
	b := bytes.NewBuffer(nil)
	e := jpeg.Encode(b, i, nil)
	failOnError(e, "jpeg encode failed")
	ioutil.WriteFile("a.jpg", b.Bytes(), 0666)
}

// 获取子图片出现的数量 只横移一行
func testGetSubPicNumSlideX(ptrPic *Pic, ptrSubPic *SubPic, ptrBeginPos *Pos) int {
	// 参数校验
	assert(ptrPic != nil, "ptrPic == nil")
	assert(ptrSubPic != nil, "ptrSubPic == nil")
	assert(ptrBeginPos != nil, "ptrBeginPos == nil")

	// 参数整理
	picWidth := ptrPic.width()
	picSubWidth := g_ptrConfig.BaseW
	picSubHeight := g_ptrConfig.BaseH
	if (picSubWidth == 0) || (picSubHeight == 0) {
		picSubWidth = ptrSubPic.width()
		picSubHeight = ptrSubPic.height()
	}
	hash := getHash()
	pic := ptrPic.m_pic.(*image.YCbCr)
	y := ptrBeginPos.m_y

	counter := 0
	for x := ptrBeginPos.m_x; x < picWidth; x += picSubWidth {
		r := image.Rect(x, y, x+picSubWidth, y+picSubHeight)
		subBaseI := pic.SubImage(r)
		subBaseM := gocv.NewMat()
		defer subBaseM.Close()
		hashCompute(hash, subBaseI, &subBaseM)
		if isSame, _ := isSameMat(hash, &subBaseM, &ptrSubPic.m_mat); isSame {
			//logPrintf("相似度:%v", similar)
			counter++
		}
	}

	return counter
}

// 获取所有子图片匹配的个数(x轴缩小,y轴不变)
func (this *PicMgr) testGetMatchBeginPos(ptrPic *Pic) *Pos {
	for _, ptrSubPic := range this.m_mapPic {
		if ptrPos := testGetFirstPos(ptrPic, ptrSubPic); ptrPos != nil {
			picSubWidth := g_ptrConfig.BaseW
			if picSubWidth == 0 {
				picSubWidth = ptrSubPic.width()
			}
			assert(picSubWidth > 0, "picSubWidth[%v] <= 0", picSubWidth)
			// 向左平移至最小值
			ptrPos.m_x = ptrPos.m_x - (ptrPos.m_x/picSubWidth)*picSubWidth
			return ptrPos
		}
	}
	return nil
}

// 获取图片中第一个匹配的起始点的精准坐标
func testGetFirstPos(ptrPic *Pic, ptrSubPic *SubPic) *Pos {
	// 参数校验
	assert(ptrPic != nil, "ptrPic == nil")
	assert(ptrSubPic != nil, "ptrSubPic == nil")

	// 参数整理
	picWidth := ptrPic.width()
	picHeight := ptrPic.height()
	picSubWidth := g_ptrConfig.BaseW
	picSubHeight := g_ptrConfig.BaseH
	if (picSubWidth == 0) || (picSubHeight == 0) {
		picSubWidth = ptrSubPic.width()
		picSubHeight = ptrSubPic.height()
	}

	hash := getHash()
	pic := ptrPic.m_pic.(*image.YCbCr)
	for y := 0; y <= (picHeight - picSubHeight); y += g_ptrConfig.StepY {
		for x := 0; x <= (picWidth - picSubWidth); x += g_ptrConfig.StepX {
			r := image.Rect(x, y, x+picSubWidth, y+picSubHeight)
			subBaseI := pic.SubImage(r)
			subBaseM := gocv.NewMat()
			defer subBaseM.Close()
			hashCompute(hash, subBaseI, &subBaseM)
			if isSame, similar := isSameMat(hash, &subBaseM, &ptrSubPic.m_mat); isSame {
				beginPos := newPos()
				beginPos.init(x, y)
				ptrResultPos, similarV := getMostSimilarPos(ptrPic, ptrSubPic, beginPos, picWidth, picHeight, picSubWidth, picSubHeight)
				assert(ptrResultPos != nil, "ptrResultPos == nil")
				logPrintf("值:%v,匹配成功起始点:(%v, %v),相似度:%v,最相似点:(%v, %v),相似度:%v", ptrSubPic.m_value, x, y, similar, ptrResultPos.m_x, ptrResultPos.m_y, similarV)
				return ptrResultPos
			} else {
				logPrintf("值:%v,匹配成功起始点:(%v, %v),相似度:%v", ptrSubPic.m_value, x, y, similar)
			}
		}
	}

	return nil
}

// 图片是否包含
func testContain(baseI image.Image, partI image.Image) bool {
	timeBegin := time.Now().UnixNano() / 1e6

	baseW := baseI.Bounds().Dx()
	baseH := baseI.Bounds().Dy()
	partW := g_ptrConfig.BaseW
	partH := g_ptrConfig.BaseH

	logPrintf("源图片宽:%v,高:%v;滑动窗口宽:%v,高:%v", baseW, baseH, partW, partH)

	hash := getHash()
	partM := gocv.NewMat()
	defer partM.Close()
	hashCompute(hash, partI, &partM)

	baseY := baseI.(*image.YCbCr)
	for y := 0; y <= (baseH - partH); y += g_ptrConfig.StepY {
		for x := 0; x <= (baseW - partW); x += g_ptrConfig.StepX {
			r := image.Rect(x, y, x+partW, y+partH)
			subBaseI := baseY.SubImage(r)
			subBaseM := gocv.NewMat()
			defer subBaseM.Close()
			hashCompute(hash, subBaseI, &subBaseM)
			if isSame, similar := isSameMat(hash, &subBaseM, &partM); isSame {
				timeEnd := time.Now().UnixNano() / 1e6
				logPrintf("匹配成功起始点:(%v, %v),相似度:%v,花费时间:%v(秒)", x, y, similar, float32(timeEnd-timeBegin)/1000.0)
				return true
			}
		}
	}

	timeEnd := time.Now().UnixNano() / 1e6
	logPrintf("图片不匹配,花费时间:%v(秒)", float32(timeEnd-timeBegin)/1000.0)

	return false
}

// 图片是否相同(相似)
func testIsSameImg(baseI image.Image, partI image.Image) bool {
	baseM, e := gocv.ImageToMatRGB(baseI)
	failOnError(e, "ImageToMatRGB")
	partM, e := gocv.ImageToMatRGB(partI)
	failOnError(e, "ImageToMatRGB")

	baseMT := gocv.NewMat()
	defer baseMT.Close()
	//hash := contrib.AverageHash{}
	hash := getHash()
	hash.Compute(baseM, &baseMT)
	if baseMT.Empty() {
		log.Fatalf("error computing hash for base")
	}

	partMT := gocv.NewMat()
	defer partMT.Close()
	hash.Compute(partM, &partMT)
	if partMT.Empty() {
		log.Fatalf("error computing hash for base")
	}

	similar := hash.Compare(baseMT, partMT)

	logPrintf("phash:%v", similar)
	return int(similar) <= g_ptrConfig.SimilarLimit
}

// 获取在图片中的所有位置
func testGetSliPosInPic(ptrPic *Pic, ptrSubPic *SubPic) []*Pos {
	// 参数校验
	assert(ptrPic != nil, "ptrPic == nil")
	assert(ptrSubPic != nil, "ptrSubPic == nil")

	// 参数整理
	picWidth := ptrPic.width()
	picHeight := ptrPic.height()
	picSubWidth := g_ptrConfig.BaseW
	picSubHeight := g_ptrConfig.BaseH
	if (picSubWidth == 0) || (picSubHeight == 0) {
		picSubWidth = ptrSubPic.width()
		picSubHeight = ptrSubPic.height()
	}

	sliPos := make([]*Pos, 0)
	hash := getHash()

	hasFound := false
	pic := ptrPic.m_pic.(*image.YCbCr)
	for y := 0; y <= (picHeight - picSubHeight); {
		hasFound = false
		for x := 0; x <= (picWidth - picSubWidth); {
			r := image.Rect(x, y, x+picSubWidth, y+picSubHeight)
			subBaseI := pic.SubImage(r)
			subBaseM := gocv.NewMat()
			defer subBaseM.Close()
			hashCompute(hash, subBaseI, &subBaseM)
			if isSame, _ := isSameMat(hash, &subBaseM, &ptrSubPic.m_mat); isSame {
				//logPrintf("匹配成功起始点:(%v, %v),相似度:%v", x, y, similar)
				ptrPos := newPos()
				ptrPos.init(x, y)
				sliPos = append(sliPos, ptrPos)
				hasFound = true
				x += picSubWidth
			} else {
				x += g_ptrConfig.StepX
			}
		}
		if hasFound {
			y += picSubHeight
		} else {
			y += g_ptrConfig.StepY
		}
	}

	return sliPos
}

// 测试=================================

//var (
//	useAll            = flag.Bool("all", false, "Compute all hashes")
//	usePHash          = flag.Bool("phash", false, "Compute PHash")
//	useAverage        = flag.Bool("average", false, "Compute AverageHash")
//	useBlockMean0     = flag.Bool("blockmean0", false, "Compute BlockMeanHash mode 0")
//	useBlockMean1     = flag.Bool("blockmean1", false, "Compute BlockMeanHash mode 1")
//	useColorMoment    = flag.Bool("colormoment", false, "Compute ColorMomentHash")
//	useMarrHildreth   = flag.Bool("marrhildreth", false, "Compute MarrHildrethHash")
//	useRadialVariance = flag.Bool("radialvariance", false, "Compute RadialVarianceHash")
//)
//
//func setupHashes() []contrib.ImgHashBase {
//	var hashes []contrib.ImgHashBase
//
//	if *usePHash || *useAll {
//		hashes = append(hashes, getHash())
//	}
//	if *useAverage || *useAll {
//		hashes = append(hashes, contrib.AverageHash{})
//	}
//	if *useBlockMean0 || *useAll {
//		hashes = append(hashes, contrib.BlockMeanHash{})
//	}
//	if *useBlockMean1 || *useAll {
//		hashes = append(hashes, contrib.BlockMeanHash{Mode: contrib.BlockMeanHashMode1})
//	}
//	if *useColorMoment || *useAll {
//		hashes = append(hashes, contrib.ColorMomentHash{})
//	}
//	if *useMarrHildreth || *useAll {
//		// MarrHildreth has default parameters for alpha/scale
//		hashes = append(hashes, contrib.NewMarrHildrethHash())
//	}
//	if *useRadialVariance || *useAll {
//		// RadialVariance has default parameters too
//		hashes = append(hashes, contrib.NewRadialVarianceHash())
//	}
//
//	// If no hashes were selected, behave as if all hashes were selected
//	if len(hashes) == 0 {
//		*useAll = true
//		return setupHashes()
//	}
//
//	return hashes
//}
//
//func main() {
//	flag.Usage = func() {
//		fmt.Println("How to run:\n\timg-similarity [-flags] [image1.jpg] [image2.jpg]")
//		flag.PrintDefaults()
//	}
//
//	printHashes := flag.Bool("print", false, "print hash values")
//	flag.Parse()
//	if flag.NArg() < 2 {
//		flag.Usage()
//		return
//	}
//
//	// read images
//	inputs := flag.Args()
//	images := make([]gocv.Mat, len(inputs))
//
//	for i := 0; i < 2; i++ {
//		img := gocv.IMRead(inputs[i], gocv.IMReadColor)
//		if img.Empty() {
//			fmt.Printf("cannot read image %s\n", inputs[i])
//			return
//		}
//		defer img.Close()
//
//		images[i] = img
//	}
//
//	// construct all of the hash types in a list. normally, you'd only use one of these.
//	hashes := setupHashes()
//
//	// compute and compare the images for each hash type
//	for _, hash := range hashes {
//		results := make([]gocv.Mat, len(images))
//
//		for i, img := range images {
//			results[i] = gocv.NewMat()
//			defer results[i].Close()
//			hash.Compute(img, &results[i])
//			if results[i].Empty() {
//				fmt.Printf("error computing hash for %s\n", inputs[i])
//				return
//			}
//		}
//
//		// compare for similarity; this returns a float64, but the meaning of values is
//		// unique to each algorithm.
//		similar := hash.Compare(results[0], results[1])
//
//		// make a pretty name for the hash
//		name := strings.TrimPrefix(fmt.Sprintf("%T", hash), "contrib.")
//		fmt.Printf("%s: similarity %g\n", name, similar)
//
//		if *printHashes {
//			// print hash result for each image
//			for i, path := range inputs {
//				fmt.Printf("\t%s = %x\n", path, results[i].ToBytes())
//			}
//		}
//	}
//}
